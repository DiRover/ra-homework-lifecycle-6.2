{"version":3,"sources":["components/Card.jsx","components/TextBox.jsx","components/Crud.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","item","deleteCard","className","content","onClick","id","TextBox","addCard","textInput","ref","placeholder","e","url","Crud","useState","state","setState","requestMethod","requestBody","request","setMethod","React","createRef","useEffect","a","text","obj","fetch","method","response","headers","body","JSON","stringify","json","result","fetchData","prevMethod","preventDefault","map","current","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAEe,SAASA,EAAKC,GAAQ,IACzBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,WACd,OACI,sBAAKC,UAAU,WAAf,UACI,sBAAKA,UAAU,eAAf,UACMF,EAAKG,QADX,OAGA,wBAAQD,UAAU,iCAAiCE,QAAY,kBAAMH,EAAWD,EAAKK,KAArF,sBCPG,SAASC,EAAQP,GAAQ,IAC5BQ,EAAuBR,EAAvBQ,QAASC,EAAcT,EAAdS,UACjB,OACQ,iCACI,0BAAUC,IAAMD,EAAYE,YAAY,sCAExC,wBAAQR,UAAU,6BAA6BE,QAAU,SAACO,GAAD,OAAOJ,EAAQI,IAAxE,qBCJhB,IAAMC,EAAM,0CAIG,SAASC,EAAKd,GAAQ,IAAD,EACNe,mBAAS,IADH,mBACzBC,EADyB,KAClBC,EADkB,OAEHF,mBAAS,CAACG,cAAe,MAAOC,YAAa,KAF1C,mBAEzBC,EAFyB,KAEhBC,EAFgB,KAG5BZ,EAAYa,IAAMC,YACtBC,qBAAU,WAAM,4CACZ,kCAAAC,EAAA,yDAEUC,EAAON,EAAQD,YACfQ,EAAM,CAAEvB,QAASsB,GACO,QAA1BN,EAAQF,cAJhB,gCAKyBU,MAAMf,EAAK,CACxBgB,OAAQT,EAAQF,gBAN5B,OAKQY,EALR,iCAQyC,SAA1BV,EAAQF,cARvB,kCASyBU,MAAMf,EAAK,CACxBgB,OAAQT,EAAQF,cAChBa,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUP,KAdjC,eASQG,EATR,iBAgByBF,MAAMf,EAAK,CAAEgB,OAAQ,QAhB9C,QAgBQC,EAhBR,gDAkByBF,MAAM,GAAD,OAAIf,EAAJ,YAAWO,EAAQD,aAAe,CACpDU,OAAQT,EAAQF,gBAnB5B,eAkBQY,EAlBR,iBAqByBF,MAAMf,EAAK,CAAEgB,OAAQ,QArB9C,QAqBQC,EArBR,gCAuByBA,EAASK,OAvBlC,QAuBUC,EAvBV,OAwBInB,EAASmB,GAxBb,6CADY,0DA2BZC,KACD,CAACjB,IAEJ,IAgBMlB,EAAa,SAACI,GAChBe,GAAU,SAACiB,GACP,MAAO,CAACpB,cAAe,SAAUC,YAAab,OAGtD,OACI,gCACI,sCACA,wBAAQH,UAAU,sCAAsCE,QAxB5C,SAACO,GACjBA,EAAE2B,iBACFlB,GAAU,SAACiB,GACP,MAAO,CAACpB,cAAe,MAAOC,YAAa,QAqB3C,uBACA,qBAAKhB,UAAY,kBAAjB,SACMa,EAAMwB,KAAI,SAACvC,GAAD,OAAU,cAACF,EAAD,CAAME,KAASA,EAAOC,WAAeA,GAAqBD,EAAKK,SAEzF,cAACC,EAAD,CAASC,QArBD,SAACI,GACbA,EAAE2B,iBACF,IAAMnC,EAAUK,EAAUgC,QAAQC,MAClCjC,EAAUgC,QAAQC,MAAQ,GAC1BrB,GAAU,WACN,MAAO,CAACH,cAAe,OAAQC,YAAaf,OAgBbK,UAAcA,OC3D1CkC,MANf,WACE,OACE,cAAC7B,EAAD,KCKW8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a0b5ef3e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Card(props) {\n    const { item, deleteCard } = props; //получаем контент и функцию удаления карты\n    return (\n        <div className='card-box'>\n            <div className='card-content'>\n                { item.content } {/*прописываем контент */}\n            </div>\n            <button className='card-button material-icons red' onClick = { () => deleteCard(item.id) }>close</button>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function TextBox(props) {\n    const { addCard, textInput } = props; //получаем функцию добавления карточки и ссылку на текстэрия\n    return (\n            <form>\n                <textarea ref={ textInput } placeholder='It was a dark and stormy night...'>\n                </textarea>\n                <button className='send-button material-icons' onClick={ (e) => addCard(e) }>send</button>\n            </form>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport Card from './Card';\nimport TextBox from './TextBox';\n//const url = 'http://localhost:7070/notes';\nconst url = 'https://unionserver.herokuapp.com/notes';\n\n\n\nexport default function Crud(props) {\n    const [state, setState] = useState([]); //стейт для отображения карточек\n    const [request, setMethod] = useState({requestMethod: 'GET', requestBody: ''}); //стейт для выпонления запросов\n    let textInput = React.createRef(); //ссылка для управления содержимым текстэриа\n    useEffect(() => { //хук для обработки жизненных циклов компонента\n        async function fetchData() {\n            let response; //переменная для хранения ответа сервера\n            const text = request.requestBody; //запиывем текст из стейта (необязательно)\n            const obj = { content: text }; //создаём объект для передачи на бэк (необяхательно, можно напрямую)\n            if (request.requestMethod === 'GET') { //получаем карточки после загрузки страницы\n                response = await fetch(url, {\n                    method: request.requestMethod,\n                });\n            } else if (request.requestMethod === 'POST') { //постим карточку на сервер\n                response = await fetch(url, { //объявление функции\n                    method: request.requestMethod, //метод\n                    headers: { //нужно обязательно прописать!!! иначе сервер неправильно парсит\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(obj) //тело запроса с контентом на сервер\n                });\n                response = await fetch(url, { method: 'GET' }); //обновляем список карточек на странице\n            } else {\n                response = await fetch(`${url}/${request.requestBody}`, { //удаляем карточку с сервера\n                    method: request.requestMethod,\n                });\n                response = await fetch(url, { method: 'GET' }); //обновляем список карточек на странице\n            }\n            const result = await response.json(); //записываем результат\n            setState(result);\n        }\n        fetchData(); //выполнение функции\n    }, [request]); //по данному параметру (стейту) хук юзэффект понимает как именно жизненный цикл у компонента, если изменился то рендерит\n\n    const refreshList = (e) => { //простое обновление списка\n        e.preventDefault();\n        setMethod((prevMethod) => {\n            return {requestMethod: 'GET', requestBody: ''}\n        });\n    }\n\n    const addCard = (e) => { //добавление карточки\n        e.preventDefault();\n        const content = textInput.current.value; //получаем значение через ref\n        textInput.current.value = ''; //очищаем поле ввода, только после такой комбинации получается чистка\n        setMethod(() => {\n            return {requestMethod: 'POST', requestBody: content} //постим на сервер\n        });\n    }\n\n    const deleteCard = (id) => { //удаление карточки\n        setMethod((prevMethod) => {\n            return {requestMethod: 'DELETE', requestBody: id} //передаём на сервер айди карточки для удаления\n        })\n    }\n    return (\n        <div>\n            <h2>GRUD</h2>\n            <button className='refresh-button material-icons green' onClick = { refreshList }>autorenew</button>\n            <div className = 'cards-container'>\n                { state.map((item) => <Card item = { item } deleteCard = { deleteCard } key = { item.id } />)}\n            </div>\n            <TextBox addCard = { addCard } textInput = { textInput } />\n        </div>\n    )\n};\n","import './App.css';\nimport Crud from './components/Crud';\nimport React from 'react';\n\n\nfunction App() {\n  return (\n    <Crud />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}